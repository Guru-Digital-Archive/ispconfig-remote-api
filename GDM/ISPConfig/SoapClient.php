<?php

namespace GDM\ISPConfig;

class SoapClient {

    /**
     *
     * @var string Url to ISP configs SOAP remote API ( usually https://your-ip:8080/remote/index.php )
     */
    private $ispConfigSoapLocation = 'https://vs1.gdmedia.tv:8080/remote/index.php';

    /**
     *
     * @var string Username to login to ISPConfig with ( Create one in ISPConfigs web interface under System > Remote Users )
     */
    private $ispConfigUser = '';

    /**
     *
     * @var string Password to login to ISPConfig with ( Create/Update in ISPConfigs web interface under System > Remote Users )
     */
    private $ispConfigPassword = '';

    /**
     *
     * @var \SoapClient Refernce to the SOAP interface
     */
    public $soapClient;

    /**
     *
     * @var string Session ID generated by logging in and used in subsequent requests
     */
    public $sessionId;

    /**
     *
     * @var array Cache of client IDs
     */
    public $clientIds = array();

    /**
     *
     * @var array Cache of clients
     */
    public $clients = array();

    /**
     *
     * Holds the last exception encounted
     *
     * @var \Exception
     */
    private $lastException;

    /**
     *
     * Returns the current Session Id
     *
     * @return string
     * @throws Exception
     */
    public function getSessionId() {
        if (!$this->sessionId) {
            throw new Exception("Tried to call method when not logged in");
        }
        return $this->sessionId;
    }

    /**
     *
     * Returns the last exception encounted
     *
     * @return \Exception
     */
    public function getLastException() {
        return $this->lastException ? : new \Exception("");
    }

    /**
     *
     * Logs in to ISPConfig creating a SoapClient and retrieves a Session Id
     *
     * @param string $ispConfigSoapLocation Url to ISP configs SOAP remote API ( usually https://your-ip:8080/remote/index.php )
     * @param string $ispConfigUser Username to login to ISPConfig with ( Create one in ISPConfigs web interface under System > Remote Users )
     * @param string $ispConfigPassword Password to login to ISPConfig with ( Create/Update in ISPConfigs web interface under System > Remote Users )
     */
    public function __construct($ispConfigSoapLocation, $ispConfigUser, $ispConfigPassword) {
        $this->ispConfigUser         = $ispConfigUser;
        $this->ispConfigPassword     = $ispConfigPassword;
        $this->ispConfigSoapLocation = $ispConfigSoapLocation;
        $this->soapClient            = new \SoapClient(null, array(
            'location' => $this->ispConfigSoapLocation,
            'uri'      => $this->ispConfigSoapLocation
        ));
        $this->sessionId             = $this->soapClient->login($this->ispConfigUser, $this->ispConfigPassword);
        if (!$this->sessionId) {
            throw new Exception("Login failed");
        }
    }

    public function createClient($contact_name, $company_name, $user_name, $password, $email, $telephone, $limit_client = 0, $web_php_options = array('no', 'fast-cgi', 'cgi', 'mod', 'suphp', 'php-fpm'), $ssh_chroot = array('no', 'jailkit'), $language = "en", $usertheme = "default", $country = "NZ") {
        $params = array(
            "contact_name"    => $contact_name,
            "username"        => $user_name,
            "password"        => $password,
            "company_name"    => $company_name,
            "email"           => $email,
            "telephone"       => $telephone,
            "limit_client"    => $limit_client,
            "web_php_options" => $web_php_options,
            "ssh_chroot"      => $ssh_chroot,
            "language"        => $language,
            "usertheme"       => $usertheme,
            "country"         => $country,
        );
        try {
            $result = $this->soapClient->client_add($this->getSessionId(), 0, $params);
        }
        catch (Exception $exc) {
            $result              = false;
            $this->lastException = $exc;
        }
        return $result;
    }

    public function createSite($clientId, $domain, $ip) {
        $params = array(
            "server_id"               => 1,
            "ip_address"              => $ip,
            "domain"                  => $domain,
            "subdomain"               => "www",
            "hd_quota"                => "-1",
            "traffic_quota"           => "-1",
            "allow_override"          => "All",
            "pm_process_idle_timeout" => "10",
            "pm_max_requests"         => "0",
            "pm_max_children"         => "10",
            "pm_start_servers"        => "2",
            "pm_max_spare_servers"    => "5",
            "errordocs"               => 1,
            "php"                     => "php-fpm",
            "stats_type"              => "webalizer",
            "pm"                      => "dynamic",
            "active"                  => "y",
            "suexec"                  => "y",
            "vhost_type"              => "name",
            "type"                    => "vhost",
            "fastcgi_php_version"     => "PHP 5.4.30:/etc/init.d/php-5.4.30-fpm:/opt/phpfarm/inst/php-5.4.30/lib/:/opt/phpfarm/inst/php-5.4.30/etc/pool.d/"
        );
        try {
            $result = $this->soapClient->sites_web_domain_add($this->getSessionId(), $clientId, $params);
        }
        catch (Exception $exc) {
            $result              = false;
            $this->lastException = $exc;
        }
        return $result;
    }

    public function createDatabaseUser($clientId, $dbUser, $dbPass) {
        $params = array(
            "server_id"         => 1,
            "database_user"     => $dbUser,
            "database_password" => $dbPass,
            "repeat_password"   => $dbPass
        );
        try {
            $result = $this->soapClient->sites_database_user_add($this->getSessionId(), $clientId, $params);
        }
        catch (Exception $exc) {
            $result              = false;
            $this->lastException = $exc;
        }
        return $result;
    }

    public function createDatabase($clientId, $site, $dbName, $dbUserId) {
        $params = array(
            "server_id"        => 1,
            "parent_domain_id" => $site,
            "database_user_id" => $dbUserId,
            "type"             => 'mysql',
            "database_name"    => $dbName,
            "database_charset" => "utf8",
            "active"           => "y",
        );
        try {
            $result = $this->soapClient->sites_database_add($this->getSessionId(), $clientId, $params);
        }
        catch (Exception $exc) {
            $result              = false;
            $this->lastException = $exc;
        }
        return $result;
    }

    public function updateDatabaseUser($clientId, $dbUser, $dbUserId, $dbPass) {
        $params = array(
            "server_id"         => 1,
            "database_user"     => $dbUser,
            "database_password" => $dbPass,
            "repeat_password"   => $dbPass
        );
        try {
            $result = $this->soapClient->sites_database_user_update($this->getSessionId(), $clientId, $dbUserId, $params) == 0;
        }
        catch (Exception $exc) {
            $result              = false;
            $this->lastException = $exc;
        }
        return $result;
    }

    public function createFTPUser($clientId, $siteId, $userName, $password) {
        $result = false;
        $site   = $this->getSite($siteId);
        if ($site !== false) {
            $params = array(
                "server_id"        => 1,
                "parent_domain_id" => $siteId,
                "username"         => $userName,
                "password"         => $password,
                "quota_size"       => "-1",
                "active"           => "y",
                "uid"              => $site['system_user'],
                "gid"              => $site['system_group'],
                "dir"              => $site['document_root'],
                "sys_userid"       => $site['sys_userid'],
                "sys_groupid"      => $site['sys_groupid'],
            );
            try {
                $result = $this->soapClient->sites_ftp_user_add($this->getSessionId(), $clientId, $params);
            }
            catch (Exception $exc) {
                $result              = false;
                $this->lastException = $exc;
            }
        }
        return $result;
    }

    public function createAlias($clientId, $siteId, $alias) {
        $result = false;
        $site   = $this->getSite($siteId);
        if ($site !== false) {
            $params = array(
                "server_id"        => 1,
                "domain"           => $alias,
                "type"             => 'alias',
                "parent_domain_id" => $site['domain_id'],
                "active"           => "y",
                "subdomain"        => "www",
            );
            try {
                $result = $this->soapClient->sites_web_aliasdomain_add($this->getSessionId(), $clientId, $params);
            }
            catch (Exception $exc) {
                $result              = false;
                $this->lastException = $exc;
            }
        }
        return $result;
    }

    public function getAllClientIds($update = false) {
        if (empty($this->clientIds) || $update) {
            $this->clientIds = $this->soapClient->client_get_all($this->getSessionId());
        }
        return $this->clientIds;
    }

    public function getClientGroupId($client_id) {
        return $this->groupIds = $this->soapClient->client_get_groupid($this->getSessionId(), $client_id);
    }

    public function getClientById($client_id) {
        try {
            $result = $this->soapClient->client_get($this->getSessionId(), $client_id);
        }
        catch (Exception $exc) {
            $result              = false;
            $this->lastException = $exc;
        }
        return $result;
    }

    public function getClientByUsername($user_name) {
        $reservedUsers = array("admin", "administrator", "user", "test");
        try {
            if (in_array($user_name, $reservedUsers)) {
                throw new Exception("$user_name is a reserved username");
            }
            $result = $this->soapClient->client_get_by_username($this->getSessionId(), $user_name);
        }
        catch (Exception $exc) {
            $result              = false;
            $this->lastException = $exc;
        }
        return $reservedUsers;
    }

    public function getAllClients($update = false) {
        if (empty($this->clients) || $update) {
            $clientIds = $this->getAllClientIds();
            // wait for 2 seconds
            usleep(100000);
            foreach ($clientIds as $i => $clientId) {
                if ($i % 20 == 0) {
                    usleep(100000);
                }
                $client = $this->getClientById($clientId);
                if ($client !== false) {
                    $this->clients[] = $this->getClientById($clientId);
                } else {
                    echo "$clientId failed!<br/>";
                }
            }
        }
        return $this->clients;
    }

    public function userNameExits($usernamesToCheck) {
        $usernamesToCheck = is_array($usernamesToCheck) ? $usernamesToCheck : array($usernamesToCheck);
        $reservedUsers    = array("admin", "administrator", "user", "test", "demo");
        $usernames        = array_merge($reservedUsers, array_map(function($c) {
                    return strtolower($c['username']);
                }, $this->getAllClients()
        ));

        $result = array();
        foreach ($usernamesToCheck as $username) {
            $obg           = new \stdClass();
            $obg->username = strtolower(trim($username));
            if (in_array($obg->username, $usernames)) {
                $obg->exists = 1;
            } else {
                $obg->exists = 0;
            }
            $result[] = $obg;
        }
        return $result;
    }

    public function getAllGroupIds() {
        $clientIds  = $this->getAllClientIds();
        $groupIds   = array();
        $groupIds[] = 0;
        foreach ($clientIds as $clientId) {
            $groupIds[] = $this->getClientGroupId($clientId);
        }
        return $groupIds;
    }

    public function getAliasDomains($primaryId) {
        return $this->soapClient->sites_web_aliasdomain_get($this->sessionId, $primaryId);
    }

    public function getSites() {
        return $this->soapClient->sites_get_all($this->getSessionId());
    }

    public function getSite($siteId) {
        return $this->soapClient->sites_web_domain_get($this->getSessionId(), $siteId);
    }

    public function getFunctions() {
        return $this->soapClient->get_function_list($this->getSessionId());
    }

    /**
     *
     * @param type $domainsToCheck
     * @return DomainStatus[]
     */
    public function domainExists($domainsToCheck) {
        $domainsToCheck  = is_array($domainsToCheck) ? $domainsToCheck : array($domainsToCheck);
        $reservedDomains = array("test.gdmedia.tv");
        $domains         = array_merge($reservedDomains, array_map(function($s) {
                    return $s['domain'];
                }, $this->getSites()
                ), $this->getAllClients()
        );
        $result = array();
        foreach ($domainsToCheck as $domain) {
            $domain   = strtolower(trim($domain));
            $result[] = DomainStatus::create($domain, in_array($domain, $domains) ? 1 : 0);
        }
        return $result;
    }

    function makeSite($clientId, $domain, $dbName, $dbUser, $dbPass) {
        $status = $this->domainExists($domain);

        if ($status[0]->exists == 1) {
            throw new \Exception("Failed to create site: The domain $domain exists");
        }
        $siteId = $this->createSite($clientId, $domain);
        if (!$siteId) {
            throw new \Exception("Failed to create site " . $this->getLastException()->getMessage());
        }
        $dbUserId = $this->createDatabaseUser($clientId, $dbUser, $dbPass);
        if (!$dbUserId) {
            throw new \Exception("Failed to create database user " . $this->getLastException()->getMessage());
        }
        $dbId = $this->createDatabase($clientId, $siteId, $dbName, $dbUserId);
        if (!$dbId) {
            throw new \Exception("Failed to create database " . $this->getLastException()->getMessage());
        }
        if (!$this->updateDatabaseUser($clientId, $dbUser, $dbUserId, $dbPass)) {
            throw new \Exception("Failed to update database user " . $this->getLastException()->getMessage());
        }
    }

}
